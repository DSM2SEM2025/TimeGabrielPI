
		#PROCEDURES
        
	#PROCEDURES DA TABELA USUARIO
    #CADASTRAR USUARIO
DELIMITER //

CREATE PROCEDURE CADASTRAR_USUARIO(
    IN P_NOME_USUARIO VARCHAR(100),
    IN P_EMAIL_USUARIO VARCHAR(100),
    IN P_SENHA_USUARIO VARCHAR(100),
    IN P_TIPO_CONTA INT
)
BEGIN
    INSERT INTO USUARIO (NOME_USUARIO, EMAIL_USUARIO, SENHA_USUARIO, TIPO_CONTA)
    VALUES (P_NOME_USUARIO, P_EMAIL_USUARIO, P_SENHA_USUARIO, P_TIPO_CONTA);
END //

DELIMITER ;

#TESTE
CALL CADASTRAR_USUARIO('João da Silva', 'joao12@email.com', 'senha123', 1);


	#EXCLUIR USUARIO
DELIMITER //
CREATE PROCEDURE EXCLUIR_USUARIO_ID(
    IN P_ID_USUARIO INT
)
BEGIN
    -- Verificar se o usuário existe
    IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = P_ID_USUARIO) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Erro: Usuário não encontrado.';
    ELSE
        DELETE FROM USUARIO
        WHERE ID_USUARIO = P_ID_USUARIO;
    END IF;
END //
DELIMITER ;

#TESTE
CALL EXCLUIR_USUARIO_ID(3);

	#ALTERAR USUARIO
DELIMITER //
CREATE PROCEDURE alterar_usuario(
    IN P_ID_USUARIO INT,
    IN P_NOME_USUARIO VARCHAR(255),
    IN P_EMAIL_USUARIO VARCHAR(255),
    IN P_SENHA_USUARIO VARCHAR(255)
)
BEGIN
    -- Verificar se o usuário JA´ eXiste via ID
    IF NOT EXISTS (SELECT 1 FROM USUARIO WHERE ID_USUARIO = P_ID_USUARIO) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Erro: Usuário não encontrado pelo ID.';
    ELSE
        -- Verificar se o usuário JA´ eXiste via email
        IF EXISTS (SELECT 1 FROM USUARIO WHERE EMAIL_USUARIO = P_EMAIL_USUARIO AND ID_USUARIO <> P_ID_USUARIO) THEN
            SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Erro: O email informado já está cadastrado para outro usuário.';
        ELSE
            UPDATE USUARIO
            SET NOME_USUARIO = P_NOME_USUARIO,
                EMAIL_USUARIO = P_EMAIL_USUARIO,
                SENHA_USUARIO = P_SENHA_USUARIO
            WHERE ID_USUARIO = P_ID_USUARIO;
        END IF;
    END IF;
END //
DELIMITER ;
CALL alterar_usuario(1, 'Novo Nome Teste 1', 'novo1@email.com', 'novasenha');
call alterar_usuario(1, "Jhon deyvid Quispe Mamani", "jhonis@gmail.com", "password", now());

	#LISTAR USUARIO
DELIMITER //

CREATE PROCEDURE LISTAR_USUARIOS()
BEGIN
    SELECT * FROM USUARIO;
END //

DELIMITER ;

#TESTE
CALL LISTAR_USUARIOS();
SELECT *FROM USUARIO;


	#FAZER LOGIN
    
DELIMITER //

CREATE PROCEDURE FAZER_LOGIN(
	IN P_EMAIL_USUARIO VARCHAR(255),
	IN P_SENHA_USUARIO VARCHAR(255)
) 
BEGIN
    IF EXISTS (
        SELECT 1 FROM USUARIO 
        WHERE EMAIL_USUARIO = P_EMAIL_USUARIO 
        AND SENHA_USUARIO = P_SENHA_USUARIO)  
THEN
    SELECT
        ID_USUARIO,
        NOME_USUARIO,
        EMAIL_USUARIO,
        TIPO_CONTA,
        'Login realizado com sucesso!' AS MENSAGEM
    FROM USUARIO
    WHERE EMAIL_USUARIO = P_EMAIL_USUARIO;
ELSE
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Erro: Email ou senha inválidos.';
END IF;
END//

DELIMITER ;

	#TESTE
INSERT INTO USUARIO (NOME_USUARIO, EMAIL_USUARIO, SENHA_USUARIO, TIPO_CONTA)
VALUES ('Maria Souza', 'maria@email.com', SHA2('senha123', 256), 1);

	#PROCEDURES DA TABELA ESTOQUE. JUNTEI COM OUTRA FUNÇÃO DE PRODUTOS: ALTERAR ESTOQUE MANUAL
    


    -- REMOVER PRODUTO
DELIMITER //

CREATE PROCEDURE EXCLUIR_PRODUTO_GERAL(
    IN P_NOME_PRODUTO VARCHAR(255)
)
BEGIN
    DECLARE produto_id INT;
    DECLARE estoque_id INT;

    START TRANSACTION;

    SELECT ID_PRODUTO, FK_ID_ESTOQUE INTO produto_id, estoque_id
    FROM PRODUTO
    WHERE NOME_PRODUTO = P_NOME_PRODUTO;

    IF produto_id IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Erro: produto não encontrado.';
        ROLLBACK;
    ELSE
        DELETE FROM PRODUTO
        WHERE ID_PRODUTO = produto_id;

        IF estoque_id IS NOT NULL THEN
            DELETE FROM ESTOQUE
            WHERE ID_ESTOQUE = estoque_id;
        END IF;
        COMMIT;
    END IF;
END //

DELIMITER ;

DROP procedure EXCLUIR_PRODUTO_GERAL;
CALL EXCLUIR_PRODUTO_GERAL('UVA');


    -- PROCURAR PRODUTO
DELIMITER //
CREATE PROCEDURE PROCURAR_PRODUTO_ID(
	IN P_ID_PRODUTO INT
)
BEGIN
	IF exists (SELECT 1 FROM PRODUTO WHERE ID_PRODUTO = P_ID_PRODUTO) THEN
		SELECT
			p.ID_PRODUTO,
			p.NOME_PRODUTO,
			p.PRECO_PRODUTO,
			p.DESC_PRODUTO,
			e.ID_ESTOQUE,
			e.TIPO_ESTOQUE
		FROM PRODUTO p JOIN ESTOQUE e ON p.FK_ID_ESTOQUE = e.ID_ESTOQUE WHERE p.ID_PRODUTO = P_ID_PRODUTO;
    ELSE
		SIGNAL SQLSTATE '45000'
		SET MESSAGE_TEXT = 'Erro: Estoque não encontrado.';
    END IF;
END //
DELIMITER ;

call PROCURAR_PRODUTO_ID(1);




# CONSULTAR HISTORICO


###
DELIMITER //
CREATE PROCEDURE CONSULTAR_HISTORICO(
    IN P_ID_PRODUTO INT
    #p_produto_id 
)
BEGIN
    SELECT m.*, p.NOME_PRODUTO AS nome_produto
    FROM MOVIMENTACAO m
    JOIN PRODUTO p ON m.FK_ID_PRODUTO = p.ID_PRODUTO
    WHERE m.FK_ID_PRODUTO = P_ID_PRODUTO
    ORDER BY m.DATA_MOVIMENTACAO DESC;
END //
DELIMITER ;
#TESTE
CALL CONSULTAR_HISTORICO(2);

	#PROCEDURE GERAR RELATORIO
    
    
DELIMITER //
CREATE PROCEDURE GERAR_RELATORIO_ESTOQUE(
    IN p_id_estoque INT
)
BEGIN
    SELECT p.ID_PRODUTO, p.NOME_PRODUTO, p.PRECO_PRODUTO, ep.QTDE, 
    (p.PRECO_PRODUTO * ep.QTDE) AS ValorTotal FROM ESTOQUE_PRODUTO ep
    
    JOIN PRODUTO p ON ep.FK_ID_PRODUTO = p.ID_PRODUTO
    WHERE ep.FK_ID_ESTOQUE = p_id_estoque
    ORDER BY p.NOME_PRODUTO;
END //
DELIMITER ;

CALL GERAR_RELATORIO_ESTOQUE(1);


#PROCEDURE 
#	CONFIRMAR_ENTREGA 
	#NÃO FEITO PQ NÃO SEI SE DEVIA TER OUTRA TABELA CHAMADA ENTREGA COM CHAVES DE PRODUTO E MOVIMENTACAO. 
    #NESSA NOVA TABELA TERIA UM ATRIBUTO CHAMADO: STATUS, NO QUAL EU FARIA A PROCEDURE
	# ESPERO RESPOSTA
    
#REGISTRAR SAIDA SERIA NA TABELA ENTREGA OU DEVE REGISTRAR TODAS AS SAIDAS DA TABELA, TANTO ENTREGAS E EXCLUSÓES FEITAS PELO USUARIO??

# ATUALIZAR ESTOQUE:
	# FAZER VIA EMAIL PELO BANCO, EU ACHO QUE NÃO DÁ.... ACREDITO QUE DEVE FAZER A FUNÇÃO PELO BACK-END MSM
    


DELIMITER //
CREATE PROCEDURE REGISTRAR_MOVIMENTO(
    IN p_fk_id_produto INT,
    IN p_qtde INT,
    IN p_tipo_movimentacao VARCHAR(255)
)
BEGIN
    IF NOT EXISTS (SELECT 1 FROM PRODUTO WHERE ID_PRODUTO = p_fk_id_produto) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Erro: ID de produto inválido.';
    ELSEIF p_qtde = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Erro: A quantidade movimentada não pode ser zero.';
    ELSEIF p_tipo_movimentacao NOT IN ('entrada', 'saida', 'ajuste') THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Erro: Tipo de movimentação inválido (deve ser "entrada", "saida" ou "ajuste").';
    ELSE
        INSERT INTO MOVIMENTACAO (FK_ID_PRODUTO, QTDE, TIPO_MOVIMENTACAO, DATA_MOVIMENTACAO)
        VALUES (p_fk_id_produto, p_qtde, p_tipo_movimentacao, CURDATE());
        
        IF p_tipo_movimentacao = 'entrada' THEN
            UPDATE ESTOQUE_PRODUTO
            SET QTDE = QTDE + p_qtde
            WHERE FK_ID_PRODUTO = p_fk_id_produto;

        ELSEIF p_tipo_movimentacao = 'saida' THEN
            UPDATE ESTOQUE_PRODUTO
            SET QTDE = QTDE - p_qtde
            WHERE FK_ID_PRODUTO = p_fk_id_produto AND QTDE >= p_qtde;
            IF ROW_COUNT() = 0 THEN
                SIGNAL SQLSTATE '45000'
                SET MESSAGE_TEXT = 'Erro: Quantidade insuficiente em estoque para realizar a saída.';
            END IF;
         ELSEIF p_tipo_movimentacao = 'ajuste' THEN
            UPDATE ESTOQUE_PRODUTO
            SET QTDE = QTDE + p_qtde
			WHERE FK_ID_PRODUTO = p_fk_id_produto;
        END IF;
    END IF;
END //
DELIMITER ;

	-- IN p_fk_id_produto INT,
    -- IN p_qtde INT,
     -- IN p_tipo_movimentacao VARCHAR(255)
    
CALL REGISTRAR_MOVIMENTO(
2, -- p_fk_id_produto
3, -- p_qtde
'saida' -- p_tipo_movimentacao
);
SELECT *FROM PRODUTO;
SELECT *FROM ESTOQUE_PRODUTO;
SELECT *FROM ESTOQUE;
SELECT *FROM MOVIMENTACAO;



DELIMITER //
CREATE PROCEDURE VERIFICAR_ENTREGA(
	IN P_ID_ENTREGA INT 
)
BEGIN 
	IF exists (SELECT 1 FROM PEDIDO_ENTREGA WHERE ID_ENTREGA = P_ID_ENTREGA) THEN
		UPDATE PEDIDO_ENTREGA SET STATUS_ENTREGA = TRUE WHERE ID_ENTREGA = P_ID_ENTREGA;
    ELSE 
		SET message_text = 'PRODUTO NÃO ENCONTRADO';
    END IF;
END //
DELIMITER ;


    --- PROCEDURES PARA FAZER

	#CADASTRAR PRODUTO
DELIMITER //
CREATE PROCEDURE CADASTRAR_PRODUTO_ESTOQUE(
    IN P_NOME_PRODUTO VARCHAR(255),
    IN P_PRECO_PRODUTO FLOAT,
    IN P_DESC_PRODUTO VARCHAR(255),
    IN P_TIPO_ESTOQUE VARCHAR(255),
    IN P_QTDE_ESTOQUE INT
)
BEGIN
    DECLARE V_ID_PRODUTO INT;
    DECLARE V_ID_ESTOQUE INT;

    START TRANSACTION;

    SELECT ID_PRODUTO, FK_ID_ESTOQUE INTO V_ID_PRODUTO, V_ID_ESTOQUE
    FROM PRODUTO
    WHERE NOME_PRODUTO = P_NOME_PRODUTO;

    IF V_ID_PRODUTO IS NOT NULL THEN
        UPDATE ESTOQUE
        SET QTDE_ESTOQUE = QTDE_ESTOQUE + P_QTDE_ESTOQUE
        WHERE ID_ESTOQUE = V_ID_ESTOQUE;
    ELSE
        SELECT ID_ESTOQUE INTO V_ID_ESTOQUE
        FROM ESTOQUE
        WHERE TIPO_ESTOQUE = LOWER(P_TIPO_ESTOQUE);

        IF V_ID_ESTOQUE IS NOT NULL THEN
            UPDATE ESTOQUE
            SET QTDE_ESTOQUE = QTDE_ESTOQUE + P_QTDE_ESTOQUE
            WHERE ID_ESTOQUE = V_ID_ESTOQUE;

            INSERT INTO PRODUTO(NOME_PRODUTO, PRECO_PRODUTO, FK_ID_ESTOQUE, DESC_PRODUTO)
            VALUES(P_NOME_PRODUTO, P_PRECO_PRODUTO, V_ID_ESTOQUE, P_DESC_PRODUTO);
        ELSE
            INSERT INTO ESTOQUE(TIPO_ESTOQUE, QTDE_ESTOQUE)
            VALUES(P_TIPO_ESTOQUE, P_QTDE_ESTOQUE);
            SET V_ID_ESTOQUE = LAST_INSERT_ID();

            INSERT INTO PRODUTO(NOME_PRODUTO, PRECO_PRODUTO, FK_ID_ESTOQUE, DESC_PRODUTO)
            VALUES(P_NOME_PRODUTO, P_PRECO_PRODUTO, V_ID_ESTOQUE, P_DESC_PRODUTO);
        END IF;
    END IF;

    COMMIT;
END //
DELIMITER ;
CALL CADASTRAR_PRODUTO_ESTOQUE('MAÇA', 22.50, 'MAÇA MUITO SUCULENTA', 'MAÇA', 400 );

DELIMITER //
CREATE PROCEDURE LISTAR_PRODUTOS()
BEGIN
	SELECT p.NOME_PRODUTO, p.PRECO_PRODUTO, p.DESC_PRODUTO, p.FK_ID_ESTOQUE, e.TIPO_ESTOQUE, e.QTDE_ESTOQUE
	FROM PRODUTO p
	LEFT JOIN ESTOQUE e ON e.ID_ESTOQUE = p.FK_ID_ESTOQUE;
END //
DELIMITER ;


    # NOTIFICAÇÃO DE FALTA DE PRODUTO
DELIMITER //

CREATE PROCEDURE NOTIFICACAO_FALTA_PRODUTO(
	IN P_NOME_PRODUTO VARCHAR(255), 
	IN limite_baixo INT, 
	IN limite_alto INT
)
BEGIN
    DECLARE V_QTDE_ESTOQUE INT;
    SELECT ESTOQUE.QTDE_ESTOQUE INTO V_QTDE_ESTOQUE
    FROM PRODUTO
    JOIN ESTOQUE ON PRODUTO.FK_ID_ESTOQUE = ESTOQUE.ID_ESTOQUE
    WHERE PRODUTO.NOME_PRODUTO = P_NOME_PRODUTO;

    IF V_QTDE_ESTOQUE IS NULL THEN
        SELECT CONCAT('Produto "', P_NOME_PRODUTO, '" não encontrado no estoque.') AS Notificação;
    ELSEIF V_QTDE_ESTOQUE = 0 THEN
        SELECT CONCAT('ALERTA: Produto "', P_NOME_PRODUTO, '" está esgotado!') AS Notificação;
    ELSEIF V_QTDE_ESTOQUE <= limite_baixo THEN
        SELECT CONCAT('ATENÇÃO: Produto "', P_NOME_PRODUTO, '" com estoque baixo (', V_QTDE_ESTOQUE, ' unidades).') AS Notificação;
    ELSE
        SELECT CONCAT('Produto "', P_NOME_PRODUTO, '" com estoque normal (', V_QTDE_ESTOQUE, ' unidades).') AS Notificação;
    END IF;
END //

DELIMITER ;
call NOTIFICACAO_FALTA_PRODUTO('MAÇA', 500, 5000)

---    #ATUALIZAR PRODUTO

delimiter //
CREATE PROCEDURE ATUALIZAR_PRODUTO(
	IN P_NOME_PRODUTO VARCHAR(255),
    IN P_PRECO_PRODUTO FLOAT,
    IN P_DESC_PRODUTO VARCHAR(255),
    IN P_TIPO_ESTOQUE VARCHAR(255),
	IN P_QTDE_ESTOQUE INT,
    IN TIPO_ATUALIZACAO INT
)
BEGIN
	DECLARE MSG_RES VARCHAR(50);
    DECLARE V_ID_ESTOQUE INT;
	DECLARE V_ID_PRODUTO INT;
    
	SELECT ID_PRODUTO INTO V_ID_PRODUTO FROM PRODUTO WHERE NOME_PRODUTO = P_NOME_PRODUTO;
    
	IF V_ID_PRODUTO IS NULL THEN
		SET MSG_RES = 'PRODUTO NÃO ENCONTRADO';
	ELSE 
		SELECT ID_ESTOQUE INTO V_ID_ESTOQUE FROM ESTOQUE WHERE TIPO_ESTOQUE = P_TIPO_ESTOQUE;
		IF V_ID_ESTOQUE IS NULL AND TIPO_ATUALIZACAO = 1 THEN
			SET MSG_RES = 'TIPO DE ESTOQUE NÃO ENCONTRADO';
		ELSEIF TIPO_ATUALIZACAO = 1 THEN
			START TRANSACTION;
			UPDATE ESTOQUE 
            SET 
				TIPO_ESTOQUE = P_TIPO_ESTOQUE, 
				QTDE_ESTOQUE = P_QTDE_ESTOQUE WHERE ID_ESTOQUE = V_ID_ESTOQUE;
                
            UPDATE PRODUTO 
            SET 
				NOME_PRODUTO = P_NOME_PRODUTO,
                PRECO_PRODUTO = P_PRECO_PRODUTO,
                DESC_PRODUTO =  P_DESC_PRODUTO WHERE ID_PRODUTO = V_ID_PRODUTO;
                
            SET MSG_RES = 'ALTERAÇÃO FEITA COM SUCESSO NO PRODUTO E SEU ESTOQUE.';
			COMMIT;
        ELSEIF TIPO_ATUALIZACAO = 2 THEN
				UPDATE PRODUTO SET 
					NOME_PRODUTO = P_NOME_PRODUTO,
					PRECO_PRODUTO = P_PRECO_PRODUTO,
					DESC_PRODUTO =  P_DESC_PRODUTO WHERE ID_PRODUTO = V_ID_PRODUTO;
			SET MSG_RES = 'ALTERAÇÃO FEITA COM SUCESSO NO PRODUTO.';
            COMMIT;
        ELSE
			SET MSG_RES = 'OPÇÃO INVALIDA';
		END IF;
	END IF;
	SELECT MSG_RES;
END //
DELIMITER ;

select *from produto;

call ATUALIZAR_PRODUTO(
'maça',
10,
'teste de update',
'mamaco',
1000, -- pode ser null caso n queira atualizar a qtde, fazer isso no back-end
1
);